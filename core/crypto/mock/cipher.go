// Code generated by mockery. DO NOT EDIT.

package crypto_mock

import (
	crypto "github.com/reshifr/secure-env/core/crypto"
	mock "github.com/stretchr/testify/mock"
)

// Cipher is an autogenerated mock type for the Cipher type
type Cipher struct {
	mock.Mock
}

type Cipher_Expecter struct {
	mock *mock.Mock
}

func (_m *Cipher) EXPECT() *Cipher_Expecter {
	return &Cipher_Expecter{mock: &_m.Mock}
}

// IV provides a mock function with given fields: fixed
func (_m *Cipher) IV(fixed []byte) (crypto.CipherIV, error) {
	ret := _m.Called(fixed)

	if len(ret) == 0 {
		panic("no return value specified for IV")
	}

	var r0 crypto.CipherIV
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (crypto.CipherIV, error)); ok {
		return rf(fixed)
	}
	if rf, ok := ret.Get(0).(func([]byte) crypto.CipherIV); ok {
		r0 = rf(fixed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.CipherIV)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(fixed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cipher_IV_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IV'
type Cipher_IV_Call struct {
	*mock.Call
}

// IV is a helper method to define mock.On call
//   - fixed []byte
func (_e *Cipher_Expecter) IV(fixed interface{}) *Cipher_IV_Call {
	return &Cipher_IV_Call{Call: _e.mock.On("IV", fixed)}
}

func (_c *Cipher_IV_Call) Run(run func(fixed []byte)) *Cipher_IV_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Cipher_IV_Call) Return(iv crypto.CipherIV, err error) *Cipher_IV_Call {
	_c.Call.Return(iv, err)
	return _c
}

func (_c *Cipher_IV_Call) RunAndReturn(run func([]byte) (crypto.CipherIV, error)) *Cipher_IV_Call {
	_c.Call.Return(run)
	return _c
}

// KeyLen provides a mock function with given fields:
func (_m *Cipher) KeyLen() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeyLen")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// Cipher_KeyLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyLen'
type Cipher_KeyLen_Call struct {
	*mock.Call
}

// KeyLen is a helper method to define mock.On call
func (_e *Cipher_Expecter) KeyLen() *Cipher_KeyLen_Call {
	return &Cipher_KeyLen_Call{Call: _e.mock.On("KeyLen")}
}

func (_c *Cipher_KeyLen_Call) Run(run func()) *Cipher_KeyLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cipher_KeyLen_Call) Return(keyLen uint32) *Cipher_KeyLen_Call {
	_c.Call.Return(keyLen)
	return _c
}

func (_c *Cipher_KeyLen_Call) RunAndReturn(run func() uint32) *Cipher_KeyLen_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: key, buf
func (_m *Cipher) Open(key []byte, buf crypto.CipherBuf) ([]byte, error) {
	ret := _m.Called(key, buf)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, crypto.CipherBuf) ([]byte, error)); ok {
		return rf(key, buf)
	}
	if rf, ok := ret.Get(0).(func([]byte, crypto.CipherBuf) []byte); ok {
		r0 = rf(key, buf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, crypto.CipherBuf) error); ok {
		r1 = rf(key, buf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cipher_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type Cipher_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - key []byte
//   - buf crypto.CipherBuf
func (_e *Cipher_Expecter) Open(key interface{}, buf interface{}) *Cipher_Open_Call {
	return &Cipher_Open_Call{Call: _e.mock.On("Open", key, buf)}
}

func (_c *Cipher_Open_Call) Run(run func(key []byte, buf crypto.CipherBuf)) *Cipher_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(crypto.CipherBuf))
	})
	return _c
}

func (_c *Cipher_Open_Call) Return(plaintext []byte, err error) *Cipher_Open_Call {
	_c.Call.Return(plaintext, err)
	return _c
}

func (_c *Cipher_Open_Call) RunAndReturn(run func([]byte, crypto.CipherBuf) ([]byte, error)) *Cipher_Open_Call {
	_c.Call.Return(run)
	return _c
}

// RandomIV provides a mock function with given fields:
func (_m *Cipher) RandomIV() (crypto.CipherIV, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RandomIV")
	}

	var r0 crypto.CipherIV
	var r1 error
	if rf, ok := ret.Get(0).(func() (crypto.CipherIV, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() crypto.CipherIV); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.CipherIV)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cipher_RandomIV_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RandomIV'
type Cipher_RandomIV_Call struct {
	*mock.Call
}

// RandomIV is a helper method to define mock.On call
func (_e *Cipher_Expecter) RandomIV() *Cipher_RandomIV_Call {
	return &Cipher_RandomIV_Call{Call: _e.mock.On("RandomIV")}
}

func (_c *Cipher_RandomIV_Call) Run(run func()) *Cipher_RandomIV_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cipher_RandomIV_Call) Return(iv crypto.CipherIV, err error) *Cipher_RandomIV_Call {
	_c.Call.Return(iv, err)
	return _c
}

func (_c *Cipher_RandomIV_Call) RunAndReturn(run func() (crypto.CipherIV, error)) *Cipher_RandomIV_Call {
	_c.Call.Return(run)
	return _c
}

// Seal provides a mock function with given fields: iv, key, plaintext
func (_m *Cipher) Seal(iv crypto.CipherIV, key []byte, plaintext []byte) (crypto.CipherBuf, error) {
	ret := _m.Called(iv, key, plaintext)

	if len(ret) == 0 {
		panic("no return value specified for Seal")
	}

	var r0 crypto.CipherBuf
	var r1 error
	if rf, ok := ret.Get(0).(func(crypto.CipherIV, []byte, []byte) (crypto.CipherBuf, error)); ok {
		return rf(iv, key, plaintext)
	}
	if rf, ok := ret.Get(0).(func(crypto.CipherIV, []byte, []byte) crypto.CipherBuf); ok {
		r0 = rf(iv, key, plaintext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.CipherBuf)
		}
	}

	if rf, ok := ret.Get(1).(func(crypto.CipherIV, []byte, []byte) error); ok {
		r1 = rf(iv, key, plaintext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cipher_Seal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seal'
type Cipher_Seal_Call struct {
	*mock.Call
}

// Seal is a helper method to define mock.On call
//   - iv crypto.CipherIV
//   - key []byte
//   - plaintext []byte
func (_e *Cipher_Expecter) Seal(iv interface{}, key interface{}, plaintext interface{}) *Cipher_Seal_Call {
	return &Cipher_Seal_Call{Call: _e.mock.On("Seal", iv, key, plaintext)}
}

func (_c *Cipher_Seal_Call) Run(run func(iv crypto.CipherIV, key []byte, plaintext []byte)) *Cipher_Seal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(crypto.CipherIV), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *Cipher_Seal_Call) Return(buf crypto.CipherBuf, err error) *Cipher_Seal_Call {
	_c.Call.Return(buf, err)
	return _c
}

func (_c *Cipher_Seal_Call) RunAndReturn(run func(crypto.CipherIV, []byte, []byte) (crypto.CipherBuf, error)) *Cipher_Seal_Call {
	_c.Call.Return(run)
	return _c
}

// NewCipher creates a new instance of Cipher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCipher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cipher {
	mock := &Cipher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
