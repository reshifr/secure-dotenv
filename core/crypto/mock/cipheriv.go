// Code generated by mockery. DO NOT EDIT.

package crypto_mock

import (
	crypto "github.com/reshifr/secure-env/core/crypto"
	mock "github.com/stretchr/testify/mock"
)

// CipherIV is an autogenerated mock type for the CipherIV type
type CipherIV struct {
	mock.Mock
}

type CipherIV_Expecter struct {
	mock *mock.Mock
}

func (_m *CipherIV) EXPECT() *CipherIV_Expecter {
	return &CipherIV_Expecter{mock: &_m.Mock}
}

// FixedLen provides a mock function with given fields:
func (_m *CipherIV) FixedLen() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FixedLen")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// CipherIV_FixedLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FixedLen'
type CipherIV_FixedLen_Call struct {
	*mock.Call
}

// FixedLen is a helper method to define mock.On call
func (_e *CipherIV_Expecter) FixedLen() *CipherIV_FixedLen_Call {
	return &CipherIV_FixedLen_Call{Call: _e.mock.On("FixedLen")}
}

func (_c *CipherIV_FixedLen_Call) Run(run func()) *CipherIV_FixedLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CipherIV_FixedLen_Call) Return(fixedLen uint32) *CipherIV_FixedLen_Call {
	_c.Call.Return(fixedLen)
	return _c
}

func (_c *CipherIV_FixedLen_Call) RunAndReturn(run func() uint32) *CipherIV_FixedLen_Call {
	_c.Call.Return(run)
	return _c
}

// Invoke provides a mock function with given fields:
func (_m *CipherIV) Invoke() crypto.CipherIV {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Invoke")
	}

	var r0 crypto.CipherIV
	if rf, ok := ret.Get(0).(func() crypto.CipherIV); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.CipherIV)
		}
	}

	return r0
}

// CipherIV_Invoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invoke'
type CipherIV_Invoke_Call struct {
	*mock.Call
}

// Invoke is a helper method to define mock.On call
func (_e *CipherIV_Expecter) Invoke() *CipherIV_Invoke_Call {
	return &CipherIV_Invoke_Call{Call: _e.mock.On("Invoke")}
}

func (_c *CipherIV_Invoke_Call) Run(run func()) *CipherIV_Invoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CipherIV_Invoke_Call) Return(newIV crypto.CipherIV) *CipherIV_Invoke_Call {
	_c.Call.Return(newIV)
	return _c
}

func (_c *CipherIV_Invoke_Call) RunAndReturn(run func() crypto.CipherIV) *CipherIV_Invoke_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with given fields:
func (_m *CipherIV) Len() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// CipherIV_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type CipherIV_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *CipherIV_Expecter) Len() *CipherIV_Len_Call {
	return &CipherIV_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *CipherIV_Len_Call) Run(run func()) *CipherIV_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CipherIV_Len_Call) Return(ivLen uint32) *CipherIV_Len_Call {
	_c.Call.Return(ivLen)
	return _c
}

func (_c *CipherIV_Len_Call) RunAndReturn(run func() uint32) *CipherIV_Len_Call {
	_c.Call.Return(run)
	return _c
}

// Raw provides a mock function with given fields:
func (_m *CipherIV) Raw() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Raw")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// CipherIV_Raw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Raw'
type CipherIV_Raw_Call struct {
	*mock.Call
}

// Raw is a helper method to define mock.On call
func (_e *CipherIV_Expecter) Raw() *CipherIV_Raw_Call {
	return &CipherIV_Raw_Call{Call: _e.mock.On("Raw")}
}

func (_c *CipherIV_Raw_Call) Run(run func()) *CipherIV_Raw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CipherIV_Raw_Call) Return(rawIV []byte) *CipherIV_Raw_Call {
	_c.Call.Return(rawIV)
	return _c
}

func (_c *CipherIV_Raw_Call) RunAndReturn(run func() []byte) *CipherIV_Raw_Call {
	_c.Call.Return(run)
	return _c
}

// NewCipherIV creates a new instance of CipherIV. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCipherIV(t interface {
	mock.TestingT
	Cleanup(func())
}) *CipherIV {
	mock := &CipherIV{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
