// Code generated by mockery. DO NOT EDIT.

package crypto_mock

import mock "github.com/stretchr/testify/mock"

// CipherBuf is an autogenerated mock type for the CipherBuf type
type CipherBuf struct {
	mock.Mock
}

type CipherBuf_Expecter struct {
	mock *mock.Mock
}

func (_m *CipherBuf) EXPECT() *CipherBuf_Expecter {
	return &CipherBuf_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields:
func (_m *CipherBuf) Add() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// CipherBuf_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type CipherBuf_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
func (_e *CipherBuf_Expecter) Add() *CipherBuf_Add_Call {
	return &CipherBuf_Add_Call{Call: _e.mock.On("Add")}
}

func (_c *CipherBuf_Add_Call) Run(run func()) *CipherBuf_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CipherBuf_Add_Call) Return(add []byte) *CipherBuf_Add_Call {
	_c.Call.Return(add)
	return _c
}

func (_c *CipherBuf_Add_Call) RunAndReturn(run func() []byte) *CipherBuf_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Block provides a mock function with given fields:
func (_m *CipherBuf) Block() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Block")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// CipherBuf_Block_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Block'
type CipherBuf_Block_Call struct {
	*mock.Call
}

// Block is a helper method to define mock.On call
func (_e *CipherBuf_Expecter) Block() *CipherBuf_Block_Call {
	return &CipherBuf_Block_Call{Call: _e.mock.On("Block")}
}

func (_c *CipherBuf_Block_Call) Run(run func()) *CipherBuf_Block_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CipherBuf_Block_Call) Return(block []byte) *CipherBuf_Block_Call {
	_c.Call.Return(block)
	return _c
}

func (_c *CipherBuf_Block_Call) RunAndReturn(run func() []byte) *CipherBuf_Block_Call {
	_c.Call.Return(run)
	return _c
}

// Ciphertext provides a mock function with given fields:
func (_m *CipherBuf) Ciphertext() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ciphertext")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// CipherBuf_Ciphertext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ciphertext'
type CipherBuf_Ciphertext_Call struct {
	*mock.Call
}

// Ciphertext is a helper method to define mock.On call
func (_e *CipherBuf_Expecter) Ciphertext() *CipherBuf_Ciphertext_Call {
	return &CipherBuf_Ciphertext_Call{Call: _e.mock.On("Ciphertext")}
}

func (_c *CipherBuf_Ciphertext_Call) Run(run func()) *CipherBuf_Ciphertext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CipherBuf_Ciphertext_Call) Return(ciphertext []byte) *CipherBuf_Ciphertext_Call {
	_c.Call.Return(ciphertext)
	return _c
}

func (_c *CipherBuf_Ciphertext_Call) RunAndReturn(run func() []byte) *CipherBuf_Ciphertext_Call {
	_c.Call.Return(run)
	return _c
}

// NewCipherBuf creates a new instance of CipherBuf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCipherBuf(t interface {
	mock.TestingT
	Cleanup(func())
}) *CipherBuf {
	mock := &CipherBuf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
