// Code generated by mockery. DO NOT EDIT.

package std_mock

import mock "github.com/stretchr/testify/mock"

// Argon2 is an autogenerated mock type for the IArgon2 type
type Argon2 struct {
	mock.Mock
}

type Argon2_Expecter struct {
	mock *mock.Mock
}

func (_m *Argon2) EXPECT() *Argon2_Expecter {
	return &Argon2_Expecter{mock: &_m.Mock}
}

// Key provides a mock function with given fields: password, salt, time, memory, threads, keyLen
func (_m *Argon2) Key(password []byte, salt []byte, time uint32, memory uint32, threads uint8, keyLen uint32) []byte {
	ret := _m.Called(password, salt, time, memory, threads, keyLen)

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, []byte, uint32, uint32, uint8, uint32) []byte); ok {
		r0 = rf(password, salt, time, memory, threads, keyLen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Argon2_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type Argon2_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
//   - password []byte
//   - salt []byte
//   - time uint32
//   - memory uint32
//   - threads uint8
//   - keyLen uint32
func (_e *Argon2_Expecter) Key(password interface{}, salt interface{}, time interface{}, memory interface{}, threads interface{}, keyLen interface{}) *Argon2_Key_Call {
	return &Argon2_Key_Call{Call: _e.mock.On("Key", password, salt, time, memory, threads, keyLen)}
}

func (_c *Argon2_Key_Call) Run(run func(password []byte, salt []byte, time uint32, memory uint32, threads uint8, keyLen uint32)) *Argon2_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte), args[2].(uint32), args[3].(uint32), args[4].(uint8), args[5].(uint32))
	})
	return _c
}

func (_c *Argon2_Key_Call) Return(key []byte) *Argon2_Key_Call {
	_c.Call.Return(key)
	return _c
}

func (_c *Argon2_Key_Call) RunAndReturn(run func([]byte, []byte, uint32, uint32, uint8, uint32) []byte) *Argon2_Key_Call {
	_c.Call.Return(run)
	return _c
}

// NewArgon2 creates a new instance of Argon2. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArgon2(t interface {
	mock.TestingT
	Cleanup(func())
}) *Argon2 {
	mock := &Argon2{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
