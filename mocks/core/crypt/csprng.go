// Code generated by mockery. DO NOT EDIT.

package crypt_mock

import mock "github.com/stretchr/testify/mock"

// CSPRNG is an autogenerated mock type for the ICSPRNG type
type CSPRNG struct {
	mock.Mock
}

type CSPRNG_Expecter struct {
	mock *mock.Mock
}

func (_m *CSPRNG) EXPECT() *CSPRNG_Expecter {
	return &CSPRNG_Expecter{mock: &_m.Mock}
}

// Make provides a mock function with given fields: blockLen
func (_m *CSPRNG) Make(blockLen int) ([]byte, error) {
	ret := _m.Called(blockLen)

	if len(ret) == 0 {
		panic("no return value specified for Make")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]byte, error)); ok {
		return rf(blockLen)
	}
	if rf, ok := ret.Get(0).(func(int) []byte); ok {
		r0 = rf(blockLen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(blockLen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CSPRNG_Make_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Make'
type CSPRNG_Make_Call struct {
	*mock.Call
}

// Make is a helper method to define mock.On call
//   - blockLen int
func (_e *CSPRNG_Expecter) Make(blockLen interface{}) *CSPRNG_Make_Call {
	return &CSPRNG_Make_Call{Call: _e.mock.On("Make", blockLen)}
}

func (_c *CSPRNG_Make_Call) Run(run func(blockLen int)) *CSPRNG_Make_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *CSPRNG_Make_Call) Return(block []byte, err error) *CSPRNG_Make_Call {
	_c.Call.Return(block, err)
	return _c
}

func (_c *CSPRNG_Make_Call) RunAndReturn(run func(int) ([]byte, error)) *CSPRNG_Make_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: block
func (_m *CSPRNG) Read(block []byte) error {
	ret := _m.Called(block)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CSPRNG_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type CSPRNG_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - block []byte
func (_e *CSPRNG_Expecter) Read(block interface{}) *CSPRNG_Read_Call {
	return &CSPRNG_Read_Call{Call: _e.mock.On("Read", block)}
}

func (_c *CSPRNG_Read_Call) Run(run func(block []byte)) *CSPRNG_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *CSPRNG_Read_Call) Return(err error) *CSPRNG_Read_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CSPRNG_Read_Call) RunAndReturn(run func([]byte) error) *CSPRNG_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewCSPRNG creates a new instance of CSPRNG. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCSPRNG(t interface {
	mock.TestingT
	Cleanup(func())
}) *CSPRNG {
	mock := &CSPRNG{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
